@startuml
title Class diagram (work in progress)

Account --|> AggregateRoot

Account .. Expense

Account .. AccountCreatedEvent

class Account {
- id: UUID
- name: String
- expenses: List<Expense>
..
+ Account(id, number, name)
+ loadFromEvents(listOfEvents, version)
+ mutate(event)
..
+ addExpense(expense): void
+ deleteExpense(expense): void
+ setNumber(number): void
+ setName(name): void
+ delete(): void
..
+ getId(): Integer
+ getName(): String
+ getBalance(fromDate, toDate): BigDecimal
}

CreateAccountCommand..AccountRepository

class CreateAccountCommand {
- accountRepository: AccountRepository
}

class Expense {
- account: Account
- date: Instant
- description: String
- amount: BigDecimal
..
Expense(account, date, description, amount)
..
+ getAccount(): Account
+ getDate(): Instant
+ getDescription(): String
+ getAmount(): BigDecimal
}

Budget .. Account

class Budget {
- id: UUID
- account: Account
- fromDate: Instant
- toDate: Instant
- description: String
- amount: BigDecimal
..
+ Budget(id, account, fromDate, toDate, description, amount)
..
+ setFromDate(fromDate): void
+ setToDate(toDate): void
+ setDescription(description): void
+ setAmount(BigDecimal): void
+ delete(): void
..
+ getAccount(): Account
+ getFromDate(): Instant
+ getToDate(): Instant
+ getDescription(): String
+ getAmount(): BigDecimal
}

abstract class AggregateRoot {
+version: Integer
+pendingEvents: Set<DomainEvent>
--
+apply(event)
}

interface DomainEvent {
- eventId: UUID
- aggregateID: UUID
- date: Instant
- type: DomainType
--
+ DomainEvent(aggregateID, date, type)
--
+ getEventId(): UUID
+ getAggregateId(): UUID
+ getDate(): Instant
}

AccountCreatedEvent .. DomainEvent

class AccountCreatedEvent {
}

class EventStore {
+ appendEvent(domainEvent)
+ getEventStream(aggregateId): Set<DomainEvent>
}

AccountRepository .. EventStore
AccountRepository .. Account

class AccountRepository {
- eventStore: EventStore
..
+ create(): void
+ findById(id): Account
+ getAll(): Set<Account>
}

@enduml